#!/bin/bash

# A CLI launcher for FlightGear.
# Copyright (c) 2022 Tobias Dammers.
# See attached COPYING file for license information.
# SPDX: MIT

export OSG_NUM_DATABASE_THREADS=5
export OSG_NUM_HTTP_DATABASE_THREADS=5
export OSG_COMPILE_CONTEXTS=on
export OSG_GL_TEXTURE_STORAGE=on
export OSG_OPTIMIZER=REMOVE_REDUNDANT_NODES

export __GL_THREADED_OPTIMIZATIONS=1

ACTION=run
SCENERY=terrasync
PHOTOSCENERY=""
EXTRA_SCENERY="1"
ADDONS="1"
THREADING=MULTI
FGFS=fgfs
LOG_LEVEL=
USE_GDB=""
OPENTRACK=""
TELNET=""
SIMBRIEF=""
CUSTOM_OPTIONS=""
AIRFRAME=""
ACTYPE=""
TIMEOFDAY="clock"
FLEETDIR=$HOME/.config/fgstart/fleet

ANTIALIAS=1
REMBRANDT=0
HDR=0

export __GL_SYNC_TO_VBLANK=1

. $HOME/.config/fgstart/settings

while [[ "$1" != "" ]]
do
    case "$1" in
        --fgfs)
            shift
            FGFS="$1"
            ;;
        --dump)
            ACTION=dump
            ;;
        --show-aircraft)
            ACTION=show-aircraft
            ;;
        --show-fleet)
            ACTION=show-fleet
            ;;
        --airport)
            shift
            AIRPORT="$1"
            ;;
        --aircraft)
            shift
            AIRCRAFT="$1"
            ;;
        --airframe)
            shift
            AIRFRAME="$1"
            ;;
        --type)
            shift
            ACTYPE="$1"
            ;;
        --simbrief)
            SIMBRIEF=1
            ;;
        --parkpos)
            shift
            PARKPOS="$1"
            ;;
        --runway)
            shift
            RUNWAY="$1"
            ;;
        --scenery)
            shift
            SCENERY="$1"
            ;;
        --photoscenery)
            PHOTOSCENERY=1
            ;;
        --hdr)
            HDR=1
            ;;
        --time)
            shift
            TIMEOFDAY="$1"
            ;;
        --callsign)
            shift
            CALLSIGN="$1"
            ;;
        --mpserver)
            shift
            MPSERVER="mpserver$1.flightgear.org"
            ;;
        --multimon)
            MULTIMON=1
            ;;
        --singlethreaded)
            THREADING=SINGLE
            ;;
        --multithreaded)
            THREADING=MULTI
            ;;
        --multithreaded2)
            THREADING=MULTI2
            ;;
        --antialias)
            shift
            ANTIALIAS="$1"
            ;;
        --extra-scenery)
            EXTRA_SCENERY="1"
            ;;
        --no-extra-scenery)
            EXTRA_SCENERY="0"
            ;;
        --addons)
            ADDONS="1"
            ;;
        --no-addons)
            ADDONS="0"
            ;;

        --rembrandt)
            REMBRANDT=1
            ;;

        --compositor)
            COMPOSITOR=1
            ;;

        --log-level)
            shift
            LOG_LEVEL="$1"
            ;;

        --gdb)
            USE_GDB="1"
            ;;
        
        --headtrack)
            OPENTRACK="1"
            ;;

        --telnet)
            TELNET="1"
            ;;

        --help|-h)
            ACTION=help
            ;;

        *)
            echo "Invalid option $1" >&2
            exit 1
            ;;
    esac
    shift
done

if [ "$ACTION" == 'help' ]
then
    cat <<EOT
fgstart - a command-line launcher for FlightGear

Copyright (c) 2020-2023 Tobias Dammers

--help,-h             Display this help
--addons              Enable addons
--no-addons           Disable addons
--aircraft AIRCRAFT   Select aircraft model AIRCRAFT
--airframe NAME       Select airframe NAME from fleet database. This may also
                      set the aircraft model, callsign, and parking position.
--airport ICAO        Spawn at airport ICAO
--antialias SETTING   Set antialiasing policy. Possible settings are:
                        2, 3, 4: let FlightGear handle antialiasing (2x/3x/4x)
                        off: Turn off all antialiasing
                        lo: Low antialiasing and no anisotropic filtering
                        med: Medium antialiasing and anisotropic filtering
                        hi: Best antialising and anisotropic filtering
--callsign CALLSIGN   Set the callsign.
--compositor          Enable Compositor in FlightGear versions that support it
                      and require explicit enabling.
--dump                Do not launch FlightGear, but instead dump the command
                      that would have been issued.
--extra-scenery       Enable extra scenery (as per settings)
--no-extra-scenery
--fgfs PATH           Use fgfs binary found at PATH
--gdb                 Run fgfs through gdb for debugging purposes.
--hdr                 Enable HDR
--headtrack           Enable OpenTrack head tracking (port 5542)
--log-level LEVEL     Set fgfs log level
--mpserver NUM        Connect to multiplayer server NUM
--multimon            Load multi-monitor configuration
--multithreaded       Set default multithreading options
--multithreaded2      Set aggressive multithreading options
--parkpos POS         Spawn at parking position POS
--photoscenery        Enable photoscenery
--rembrandt           Enable Rembrandt
--runway RUNWAY       Spawn on runway RUNWAY
--scenery SETTING     Select scenery to load by SETTING. Possible values:
                        terragit - use TerraGIT
                        terrasync - use TerraSync and enable automatic
                                    downloads
                        terrasync-existing - use TerraSync, but disable
                                             automatic downloads
                        1.0 - use World Scenery 1.0
                        none - do not use any particular scenery
--show-aircraft       Show available aircraft models (to be passed to
                      --aircraft).
--show-fleet          List available airframes in your fleet.
--simbrief            Spawn at appropriate startup location, and with the
                      selected airframe for your current SimBrief flight plan.
                      For this to work, the tail number selected in SimBrief
                      must be available in your fleet.
--singlethreaded      Disable multi-threading.
--telnet              Open a telnet server on port 10001 and allow nasal
                      through it.
--time TIME           Select time setting for fgfs
--type TYPE           Select aircraft type TYPE as per your fleet. This is
                      different from --aircraft, which selects the aircraft
                      model as it is named in FlightGear; --type selects by
                      whichever name is found in your fleet.
EOT
exit
fi

if [ "$ACTION" == 'show-fleet' ]
then
    echo "--- AIRFRAMES ---"
    echo "+--------+----------+-----+--------------------------------+----------------------------------------------------+"
    for AIRFRAME_FILE in "$FLEETDIR/airframes/"*
    do
        (
            . "$AIRFRAME_FILE"
            ACTYPE_FILE=$FLEETDIR/types/$ACTYPE
            if [[ -e "$ACTYPE_FILE" ]]
            then
                . "$ACTYPE_FILE"
            fi
            printf "| %-6s | %-8s | %-3s | %-30s | %-50s |\n" \
                $(basename "$AIRFRAME_FILE") \
                "$ACTYPE" \
                "$AIRLINE" \
                "$AIRCRAFT" \
                "$AIRFRAME_COMMENT"
        )
    done
    echo "+--------+----------+-----+--------------------------------+----------------------------------------------------+"
    exit
fi

# SIMBRIEF
if [ "$SIMBRIEF" == "1" ]
then
    SIMBRIEF_FILENAME=$HOME/tmp/simbrief.xml
    (curl "https://www.simbrief.com/api/xml.fetcher.php?username=$SIMBRIEF_USER" || exit -1) > "$SIMBRIEF_FILENAME"
    AIRPORT=$(xmlstarlet sel -t -m '/' -v '/OFP/origin/icao_code' "$SIMBRIEF_FILENAME")
    CALLSIGN=$(xmlstarlet sel -t -m '/' -v '/OFP/atc/callsign' "$SIMBRIEF_FILENAME")
    AIRFRAME=$(xmlstarlet sel -t -m '/' -v '/OFP/aircraft/reg' "$SIMBRIEF_FILENAME")
    ACTYPE=$(xmlstarlet sel -t -m '/' -v '/OFP/aircraft/icaocode' "$SIMBRIEF_FILENAME")

    echo "--- SIMBRIEF ---"
    echo "CALLSIGN: $CALLSIGN"
    echo "AIRFRAME: $AIRFRAME"
    echo "ACTYPE: $ACTYPE"
    echo "AIRPORT: $AIRPORT"
fi

# Resolve airframe
if [ "$AIRFRAME" != "" ]
then
    AIRFRAME_FILE=$FLEETDIR/airframes/$AIRFRAME
    if [[ -e "$AIRFRAME_FILE" ]]
    then
        . "$AIRFRAME_FILE"
    fi
fi

# Resolve type
if [ "$ACTYPE" != "" ]
then
    ACTYPE_FILE=$FLEETDIR/types/$ACTYPE
    if [[ -e "$ACTYPE_FILE" ]]
    then
        . "$ACTYPE_FILE"
    fi
fi

# Base command with Phi enabled and the usual settings.
COMMAND="$FGFS \
            --httpd=10000 \
            --fov=70.8 \
            --disable-ai-traffic \
            $CUSTOM_OPTIONS \
            --enable-ai-models \
            --prop:/sim/rendering/use-vbos=true"

# if [ "$FGNEXT" == "1" ]
# then
#     COMMAND="$COMMAND --composite-viewer=0 "
# fi

if [ "$TELNET" == "1" ]
then
    COMMAND="$COMMAND --telnet=10001 --allow-nasal-from-sockets"
fi

if [ "$USE_GDB" == "1" ]
then
    COMMAND="gdb -q -n -batch -ex 'handle SIGTSTP nostop' -ex 'handle SIGCONT nostop' -ex 'handle SIGHUP nostop nopass' -ex 'handle SIGPIPE nostop' -ex 'handle 32 pass nostop noprint' -ex r -ex 'thread apply all bt' -ex where --args $COMMAND"
fi

SCENERY_PATHS=""

if [ "$LOG_LEVEL" != "" ]
then
    COMMAND="$COMMAND --log-level=$LOG_LEVEL"
fi

if [ "$ADDONS" == "1" ]
then
    for DIR in $ADDON_DIRS
    do
        echo "$DIR"
        COMMAND="$COMMAND --addon=$DIR"
    done
fi

if [ "$OPENTRACK" == "1" ]
then
    COMMAND="$COMMAND --generic=socket,in,25,127.0.0.1,5542,udp,opentrack"
fi

if [ "$PHOTOSCENERY" == "1" ]
then
    SCENERY_PATHS="$SCENERY_PATHS:$PHOTOSCENERY_DIR"
fi

if [ "$EXTRA_SCENERY" == "1" ]
then
    # Use additional scenery
    for DIR in $CUSTOM_SCENERY_PATHS
    do
        SCENERY_PATHS="$SCENERY_PATHS:$DIR"
    done
fi


DEF_SCENERY_PATH="$HOME/.fgfs/TerraSync"

case $SCENERY in
    terragit)
        # Use TerraGIT
        SCENERY_PATHS="$SCENERY_PATHS:$TERRAGIT_PATH"
        DEF_SCENERY_PATH="$TERRAGIT_PATH"
        # Don't use TerraSync
        COMMAND="$COMMAND --disable-terrasync"
        ;;
    terrasync)
        SCENERY_PATHS="$SCENERY_PATHS:$HOME/.fgfs/TerraSync"
        # Use TerraSync
        COMMAND="$COMMAND --enable-terrasync"
        ;;
    1.0)
        # Use 1.0 scenery
        SCENERY_PATHS="$SCENERY_PATHS:$SCENERY_1_PATH"
        DEF_SCENERY_PATH="$SCENERY_1_PATH"
        # Don't use TerraSync
        COMMAND="$COMMAND --disable-terrasync"
        ;;
    none)
        # Don't use any particular scenery
        # Don't use TerraSync
        COMMAND="$COMMAND --disable-terrasync"
        ;;
    terrasync-existing)
        SCENERY_PATHS="$SCENERY_PATHS:$HOME/.fgfs/TerraSync"
        # Use TerraSync
        COMMAND="$COMMAND --disable-terrasync"
        ;;
esac

SCENERY_PATHS="$(echo "$SCENERY_PATHS" | sed -e 's/^://')"

COMMAND="$COMMAND --fg-scenery=$SCENERY_PATHS"

if [ "$HDR" == "1" ]
then
    COMMAND="$COMMAND --compositor=/Compositor/HDR/hdr"
fi


if [ "$ACTION" != "show-aircraft" ]
then
    if [[ "$AIRPORT" == "" ]]
    then
        read -p 'Airport? ' AIRPORT
    fi

    C1=$(echo "$AIRPORT" | cut -c 1)
    C2=$(echo "$AIRPORT" | cut -c 2)
    C3=$(echo "$AIRPORT" | cut -c 3)

    PARKINGS_XSL=$(cat <<EOT
<?xml version="1.0" ?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="text"/>
    <xsl:template match="/">
        <xsl:call-template name="main" />
    </xsl:template>
    <xsl:template name="main">
        <xsl:for-each select="//Parking">
            <xsl:value-of select="@name" />
            <xsl:value-of select="@number" />
            <xsl:text>&#xa;</xsl:text>
        </xsl:for-each>
    </xsl:template>
</xsl:stylesheet>
EOT
    )

    PARKINGS=$(\
        (for SCENERY_PATH in $(echo $SCENERY_PATHS|tr ':' '\n');
        do
            GROUNDNET_FILE="$SCENERY_PATH/Airports/$C1/$C2/$C3/$AIRPORT.groundnet.xml"
            if [[ -e "$GROUNDNET_FILE" ]]
            then
                xmlstarlet \
                    tr <(echo "$PARKINGS_XSL") \
                    "$GROUNDNET_FILE"
                break
            fi
        done <<< "$SCENERY_PATHS") | sort -u
        )

    RUNWAYS_XSL=$(cat <<EOT
<?xml version="1.0" ?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
    <xsl:output method="text"/>
    <xsl:template match="/">
        <xsl:call-template name="main" />
    </xsl:template>
    <xsl:template name="main">
        <xsl:for-each select="//threshold">
            <xsl:value-of select="rwy" />
            <xsl:text>&#xa;</xsl:text>
        </xsl:for-each>
    </xsl:template>
</xsl:stylesheet>
EOT
    )

    RUNWAYS=$(\
        xmlstarlet \
            tr <(echo "$RUNWAYS_XSL") \
            "$DEF_SCENERY_PATH/Airports/$C1/$C2/$C3/$AIRPORT.threshold.xml"
        )

    if [[ "$PARKPOS" == "" ]] && [[ "$RUNWAY" == "" ]]
    then
        echo "$PARKINGS" | column
        read -p 'Parkpos? ' PARKPOS
        if [[ "$PARKPOS" == "" ]]
        then
            echo "$RUNWAYS"
            read -p 'Runway? ' RUNWAY
        elif [[ "$PARKPOS" =~ ^[1-0][0-9]*$ ]]
        then
            PARKPOS=$(echo "$PARKINGS" | head -n$PARKPOS | tail -n1)
        fi
    fi

    if [[ "$AIRCRAFT" == "" ]]; then read -p 'Aircraft? ' AIRCRAFT; fi
    if [[ "$TIMEOFDAY" == "" ]]; then read -p 'Time? ' TIMEOFDAY; fi
    if [[ "$CALLSIGN" == "" ]]; then read -p 'Callsign? ' CALLSIGN; fi
    if [[ "$MPSERVER" == "" ]]; then echo 'Not connecting to multiplayer network'; fi
fi

# Additional aircraft
for AIRCRAFT_PATH in $AIRCRAFT_PATHS
do
    COMMAND="$COMMAND --fg-aircraft=$AIRCRAFT_PATH"
done

if [ "$ACTION" != "show-aircraft" ]
then
    case "$THREADING" in
        SINGLE)
            export OSG_NUM_DATABASE_THREADS=1
            export OSG_NUM_HTTP_DATABASE_THREADS=1
            export __GL_THREADED_OPTIMIZATIONS=0
            COMMAND="$COMMAND \
                        --prop:/sim/rendering/multithreading-mode=SingleThreaded \
                        --prop:/sim/nasal-gc-threaded=false"
            ;;
        MULTI2)
            COMMAND="$COMMAND \
                        --prop:/sim/rendering/multithreading-mode=CullThreadPerCameraDrawThreadPerContext \
                        --prop:/sim/nasal-gc-threaded=false"
            ;;
        *)
            COMMAND="$COMMAND \
                        --prop:/sim/rendering/multithreading-mode=CullDrawThreadPerContext \
                        --prop:/sim/nasal-gc-threaded=false"
            ;;
    esac

    case "$ANTIALIAS" in
        "[2-4]")
            # FG handles AA
            COMMAND="$COMMAND \
                    --prop:/sim/rendering/multi-sample-buffers=true \
                    --prop:/sim/rendering/multi-samples=$ANTIALIAS"
            export __GL_FSAA_MODE=0
            export __GL_LOG_MAX_ANISO=0
            ;;
        *)
            COMMAND="$COMMAND \
                    --prop:/sim/rendering/multi-sample-buffers=false \
                    --prop:/sim/rendering/multi-samples=1"
            case "$ANTIALIAS" in
                off)
                    export __GL_FSAA_MODE=0
                    export __GL_LOG_MAX_ANISO=1
                    ;;
                lo)
                    export __GL_FSAA_MODE=1
                    export __GL_LOG_MAX_ANISO=0
                    ;;
                hi)
                    export __GL_FSAA_MODE=10
                    export __GL_LOG_MAX_ANISO=2
                    ;;
                *)
                    # reasonable defaults
                    export __GL_FSAA_MODE=5
                    export __GL_LOG_MAX_ANISO=1
                    ;;
            esac
            ;;
    esac

    if [[ "$COMPOSITOR" == "1" ]]
    then
        COMMAND="$COMMAND --compositor=Compositor/als"
        COMMAND="$COMMAND --prop:bool:/sim/rendering/als/shadows/enabled=true"
    fi

    # tweak some rendering settings
    COMMAND="$COMMAND --prop:/sim/rendering/max-paged-lod=200 --prop:/sim/rendering/plod-minimum-expiry-time-secs=30"
    COMMAND="$COMMAND --prop:int:/sim/rendering/shadows/map-size=8192"

    # Now compose the dynamic part of the command
    COMMAND="$COMMAND \
                --aircraft=$AIRCRAFT"

    if [ "$AIRPORT" != "" ]
    then
        COMMAND="$COMMAND --airport=$AIRPORT"
        if [ "$PARKPOS" != "" ]
        then
            COMMAND="$COMMAND --parkpos=$PARKPOS"
        elif [ "$RUNWAY" != "" ]
        then
            COMMAND="$COMMAND --runway=$RUNWAY"
        fi
    fi
    if [ "$TIMEOFDAY" != "" ]
    then
        COMMAND="$COMMAND --timeofday=$TIMEOFDAY"
    fi
    if [ "$CALLSIGN" != "" ]
    then
        COMMAND="$COMMAND --callsign=$CALLSIGN"
    fi
    if [ "$MPSERVER" != "" ]
    then
        COMMAND="$COMMAND --multiplay=out,10,5000,$MPSERVER --multiplay=in,10,,5000"
    fi
fi

COMMAND="$COMMAND --config=$DEFAULT_CONFIG_XML"
if [ "$MULTIMON" != "" ]
then
    COMMAND="$COMMAND --config=$MULTIMON_CONFIG_XML"
fi

COMMAND="$COMMAND $FG_EXTRA_OPTS"

case "$ACTION" in
    dump)
        echo "$COMMAND"
        ;;
    run)
        $PRERUN
        $COMMAND
        ;;
    show-aircraft)
        $COMMAND --show-aircraft
        ;;
    *)
        echo "invalid command: $COMMAND"
        ;;
esac
